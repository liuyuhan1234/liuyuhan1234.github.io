---
layout: post
title:  "KNN实战"
date:   2020-01-19 21:40:37 +0530
categories: 机器学习 Python

---

## Python代码
```python
import numpy as np
import matplotlib.pyplot as plt
from math import sqrt
raw_data_X=[
[3.393533211,2.331273381],
[3.110073483,1.781539638],
[1.343808831,3.368360954],
[3.582294042,4.679179110],
[2.280362439,2.866990263],
[7.423436942,4.696522875],
[5.745051997,3.533989803],
[9.172168622,2.511101045],
[7.792783481,3.424088941],
[7.939820817,0.791637231]
]
raw_data_y=[0,0,0,0,0,1,1,1,1,1]

X_train=np.array(raw_data_X)#将python数组传递为训练集
y_train=np.array(raw_data_y)

plt.scatter(X_train[y_train==0,0],X_train[y_train==0,1],color='g')#绘制图
plt.scatter(X_train[y_train==1,0],X_train[y_train==1,1],color='r')
plt.show()

x=np.array([8.093607318,3.365731514])#新来的数据
plt.scatter(X_train[y_train==0,0],X_train[y_train==0,1],color='g')#绘制图&新来的数据点
plt.scatter(X_train[y_train==1,0],X_train[y_train==1,1],color='r')
plt.scatter(x[0],x[1],color='b')#单点绘制
plt.show()

#KNN正式开始
#第一步计算欧拉距离
distances=[]

#复杂方法（1）
for x_train in X_train:
 d=sqrt(np.sum((x_train-x)**2))
 distances.append(d)

#生成表达式法（2）
distances=[sqrt(np.sum((x_train-x)**2))for x_train in X_train]
print(distances)
nearest=np.argsort(distances)#排序列表并生成索引[8756930142]
k=6#k值
topK_y=[y_train[i]for i in nearest[:k]]#nearest的前k个元素
print(topK_y)#[1,1,1,1,1,0]
from collections import Counter
votes=Counter(topK_y)
predict_y=votes.most_common(1)[0][0]#票数最多的一个元素返回值是[(1,5)]
print(predict_y)
```
## 结果
```
[4.812566907609877, 5.229270827235305, 6.749798999160064, 4.6986266144110695, 5.83460014556857, 1.4900114024329525, 2.354574897431513, 1.3761132675144652, 0.3064319992975, 2.5786840957478887]
[1, 1, 1, 1, 1, 0]
1
```